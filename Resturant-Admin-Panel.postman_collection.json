{
	"info": {
		"_postman_id": "8683b779-a57e-4dcf-955a-a53b0a68146e",
		"name": "Resturant-Admin-Panel",
		"description": "The Restaurant Admin Panel API is a critical component of a comprehensive web-based solution designed to streamline the management of restaurants. Developed using the MERN (MongoDB, Express.js, React.js, Node.js) stack, this API empowers restaurant owners and administrators with a suite of powerful features to efficiently manage their operations. Below are the key features and technologies utilized in this API:\n\n**Key Features:**\n\n1. **Menu Management:** This API allows you to effortlessly add, edit, and delete menu items. Each menu item can be customized with details such as name, description, price, and category. This feature simplifies the process of updating the restaurant's offerings, ensuring that customers always have access to accurate and enticing menus.\n    \n2. **Order Management:** Efficiently handle incoming orders with features to view and process orders, update their status, and access order history. This functionality ensures that restaurant staff can keep track of orders in real-time and maintain a high level of service quality.\n    \n3. **User Management:** Manage restaurant staff accounts, roles, and permissions effortlessly. Assign specific roles and permissions to staff members, enhancing security and enabling role-based access control.\n    \n4. **Analytics Dashboard:** Gain valuable insights into sales, revenue, and other key metrics through interactive charts and graphs. The analytics dashboard provides restaurant owners with the tools needed to make data-driven decisions, optimize operations, and enhance profitability.\n    \n5. **Settings and Configurations:** Easily configure restaurant details, opening hours, payment methods, and other settings. This feature enables restaurant owners to adapt their settings to meet changing customer demands and operational needs.\n    \n6. **Real-Time Notifications:** Receive instant notifications for new orders, order status updates, and other important events using WebSocket technology. Real-time notifications ensure that restaurant staff can respond promptly to customer requests and changes in order statuses.\n    \n\n**Technologies Used:**\n\n- **Frontend:** React.js, React Router\n    \n- **Backend:** Node.js, Express.js, WebSocket (Socket.io)\n    \n- **Database:** MongoDB\n    \n- **Authentication:** JSON Web Tokens (JWT)\n    \n- **UI Framework:** Bootstrap, Material-UI\n    \n- **RESTful API Design and Integration**\n    \n\nThe Restaurant Admin Panel API is a versatile and robust solution that combines modern frontend and backend technologies to provide restaurant owners with a powerful toolset for efficient restaurant management. Whether you are a restaurant owner looking to enhance your operations or a developer seeking to integrate these features into your own application, this API offers a scalable and feature-rich solution.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18099618"
	},
	"item": [
		{
			"name": "Orders",
			"item": [
				{
					"name": "GetProductBreakfast",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/breakfast",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"breakfast"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of products categorized as \"Breakfast\" from the menu.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/breakfast`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of product objects categorized as \"Breakfast.\"\n    \n- HTTP Status 200 (No Data Found): Returns a \"Successful\" message with an empty array if no \"Breakfast\" items are found.\n    \n- HTTP Status 404 (Error): Returns an \"Unsuccessful\" message if there was an issue retrieving data."
					},
					"response": []
				},
				{
					"name": "GetProductStarters",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/starters",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"starters"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of products categorized as \"Starters.\"\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/starters`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of product objects categorized as \"Starters.\"\n    \n- HTTP Status 200 (No Data Found): Returns a \"Successful\" message with an empty array if no \"Starters\" are found.\n    \n- HTTP Status 404 (Error): Returns an \"Unsuccessful\" message if there was an issue retrieving data."
					},
					"response": []
				},
				{
					"name": "PostProduct",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order"
							]
						},
						"description": "**Description:** This API endpoint allows the creation of a new product with the specified details.\n\n**HTTP Method:** POST\n\n**Request URL:** `/api/products`\n\n**Request Body:**\n\n- `name` (string, required): The name of the product.\n    \n- `cat` (string, required): The category to which the product belongs.\n    \n- `img` (string): The URL or path to the product image.\n    \n- `price` (number, required): The price of the product.\n    \n- `rating` (number): The initial product rating (usually set to 0).\n    \n- `total_sales` (number): The total sales count (usually set to 0).\n    \n- `cost_price` (number, required): The cost price of the product.\n    \n- `customer_id` (number): The customer ID associated with the product (usually set to 0).\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with the message \"Successful\" when the product is created successfully.\n    \n- HTTP Status 404 (Error): Returns a JSON response with error details if there was an issue creating the product."
					},
					"response": []
				},
				{
					"name": "RouteOrdersDetailAndRider",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/riders/routes/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"riders",
								"routes",
								"orders"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of orders that are currently in the \"On Route\" status along with detailed information about the products included in each order and the associated rider information.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/orders/on-route`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of order objects, each containing details about the order, the products included, and the associated rider information.\n    \n- HTTP Status 404 (No Orders Found): Returns a \"No orders found\" message with an empty array if no orders are currently in the \"On Route\" status.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "OrdersDetailAndRider",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/riders/orders/details",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"riders",
								"orders",
								"details"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of orders that are currently in the \"assigned\" status along with detailed information about the products included in each order and the associated rider information.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/orders/assigned`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of order objects, each containing details about the order, the products included, and the associated rider information.\n    \n- HTTP Status 404 (No Orders Found): Returns a \"No orders found\" message with an empty array if no orders are currently in the \"assigned\" status.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "OrdersAndRider",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/riders/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"riders",
								"orders"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of orders and includes detailed information about the associated riders for each order. It performs a lookup operation to fetch the rider information for each order based on the `all_riders` field.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/orders/with-riders`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of order objects, each containing details about the order and the associated rider information.\n    \n- HTTP Status 404 (No Orders Found): Returns an \"Error\" message if no orders with associated riders are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "DeleteOrder",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/delete/order/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"delete",
								"order",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "**Endpoint: Delete an Order**\n\n**Description:** This API endpoint allows the deletion of an order by its unique identifier.\n\n**HTTP Method:** DELETE\n\n**Request URL:** `/api/orders/:id`\n\n**Parameters:**\n\n- `id` (string, required): The unique identifier of the order to be deleted, typically provided as a route parameter.\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a \"Success\" message when the order is successfully deleted.\n    \n- HTTP Status 404 (Not Found): Returns an error message if the order with the specified ID is not found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue deleting the order."
					},
					"response": []
				},
				{
					"name": "EditOrder",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/edit/order/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"edit",
								"order",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "**Description:** This API endpoint allows for the editing of a product's details based on its unique identifier.\n\n**HTTP Method:** POST\n\n**Request URL:** `/api/products/:id`\n\n**Parameters:**\n\n- `id` (string, required): The unique identifier of the product to be edited, typically provided as a route parameter.\n    \n\n**Request Body:**\n\n- `name` (string, required): The updated name of the product.\n    \n- `cat` (string, required): The updated category to which the product belongs.\n    \n- `img` (string): The updated URL or path to the product image.\n    \n- `price` (number, required): The updated price of the product.\n    \n- `cost_price` (number, required): The updated cost price of the product.\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a \"Successful\" message when the product is successfully edited.\n    \n- HTTP Status 404 (Not Found): Returns an error message if the product with the specified ID is not found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue editing the product."
					},
					"response": []
				},
				{
					"name": "GetOrderID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/orders/:id",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"orders",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": ""
								}
							]
						},
						"description": "**Description:** This API endpoint allows you to retrieve product details by its unique identifier (ID).\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/:id`\n\n**Parameters:**\n\n- `id` (string, required): The unique identifier (ID) of the product to be retrieved, typically provided as a route parameter.\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with the details of the product when the product with the specified ID is found.\n    \n- HTTP Status 404 (Not Found): Returns an error message if the product with the specified ID is not found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the product."
					},
					"response": []
				},
				{
					"name": "GetOrderProductDetails",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/orders/product",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"orders",
								"product"
							]
						},
						"description": "Here's an API description for the provided code:\n\n**Endpoint: Get Order Product Details**\n\n**Description:** This API endpoint retrieves a list of orders along with detailed information about the products included in each order. It performs a lookup operation to fetch the product information for each order based on the `orders` field.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/orders/product-details`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of order objects, each containing details about the order and the associated product information.\n    \n- HTTP Status 404 (No Orders Found): Returns an \"Error\" message if no orders with associated product details are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "GetOrderDetails",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/orders",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"orders"
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of orders along with detailed information about the customers who placed the orders. It performs a lookup operation to fetch the customer information for each order based on the `customer_id` field. Additionally, it retrieves details about a specific product with a hardcoded ID ('63c43e40e42151179f3a685f').\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/orders/details`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of order objects, each containing details about the order and the associated customer information. Additionally, it logs details about a specific product to the console.\n    \n- HTTP Status 404 (No Orders Found): Returns an \"Error\" message if no orders with associated customer details are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "GetProductBeverage",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/beverage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"beverage"
							]
						},
						"description": "**Endpoint: Get Products by Category (Beverage)**\n\n**Description:** This API endpoint retrieves a list of products that belong to the \"Beverage\" category.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/beverage`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of product objects, each belonging to the \"Beverage\" category.\n    \n- HTTP Status 404 (No Products Found): Returns an \"Unsuccessful\" message if no products in the \"Beverage\" category are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "GetProductDessert",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/dessert",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"dessert"
							]
						},
						"description": "**Endpoint: Get Products by Category (Dessert)**\n\n**Description:** This API endpoint retrieves a list of products that belong to the \"Dessert\" category.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/dessert`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of product objects, each belonging to the \"Dessert\" category.\n    \n- HTTP Status 404 (No Products Found): Returns an \"Unsuccessful\" message if no products in the \"Dessert\" category are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				},
				{
					"name": "GetProductDinner",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/order/get/dinner",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"order",
								"get",
								"dinner"
							]
						},
						"description": "**Endpoint: Get Products by Category (Dinner)**\n\n**Description:** This API endpoint retrieves a list of products that belong to the \"Dinner\" category.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/products/dinner`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of product objects, each belonging to the \"Dinner\" category.\n    \n- HTTP Status 404 (No Products Found): Returns an \"Unsuccessful\" message if no products in the \"Dinner\" category are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"Orders\" folder contains a set of API endpoints and related code for managing and retrieving order-related data within the web application. Orders are a crucial part of e-commerce and restaurant management systems, and this folder handles various operations related to orders, including creation, retrieval, modification, and deletion.\n\n**Contents:**\n\n1. **Create Order API:** This API allows the creation of new orders, typically involving customer selections, cart management, and order processing.\n    \n2. **Retrieve Orders API:** These APIs retrieve order information, which may include details such as order ID, customer details, order items, and total amount.\n    \n3. **Edit Order API:** This API enables the modification of existing orders, allowing for updates to order items, quantities, and other order-related details.\n    \n4. **Delete Order API:** This API allows the deletion of orders based on their unique identifier, typically used for order cancellations.\n    \n5. **Order Status API:** This API provides information on the current status of orders, including order tracking, fulfillment status, and delivery updates.\n    \n6. **Order History API:** This API retrieves historical order data, offering insights into past orders, customer behavior, and sales trends.\n    \n7. **Order Payment API:** These APIs handle payment processing for orders, integrating with payment gateways and ensuring secure transactions.\n    \n8. **Order Notifications API:** This API sends real-time notifications to customers and staff regarding order status changes, ensuring a seamless ordering experience.\n    \n\n**Purpose:**  \nThe \"Orders\" folder serves as the backend infrastructure for handling all aspects of order management within the web application. It facilitates order creation, tracking, and processing, enhancing user experience and providing essential functionality for businesses that rely on managing and fulfilling customer orders.\n\n**Usage:**  \nDevelopers working on the web application's backend can refer to the \"Orders\" folder to implement, customize, and extend order-related functionality. These APIs are crucial for businesses that involve e-commerce, food delivery, or any service that relies on order processing and management.\n\n**Note:** It's essential to ensure that the APIs within the \"Orders\" folder are secure, handle user authentication and authorization, and follow best practices for data validation and error handling to protect customer data and provide a reliable service."
		},
		{
			"name": "Customers",
			"item": [
				{
					"name": "GetCustomers",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Description:** This API endpoint retrieves a list of customers from the web application's database. It returns a collection of customer objects, each containing details about individual customers, such as their name, email, phone number, and other relevant information.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/customers`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of customer objects, each representing a customer's profile.\n    \n- HTTP Status 404 (No Customers Found): Returns an \"Error\" message if no customer records are found in the database.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the customer data."
					},
					"response": []
				},
				{
					"name": "CalculateTotalAmount",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/customers/price",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"customers",
								"price"
							]
						},
						"description": "**Endpoint: Calculate Total Amount for Customer Orders**\n\n**Description:** This API endpoint calculates the total amount spent by a specific customer on their orders. It retrieves the customer's profile by their unique identifier, fetches their order IDs, and then looks up each order's product details to calculate the total amount.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/customers/calculate-total-amount`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with the calculated total amount spent by the customer on their orders.\n    \n- HTTP Status 404 (Customer Not Found): Returns an error message if the customer profile is not found based on the provided customer ID.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue calculating the total amount or retrieving the data."
					},
					"response": []
				},
				{
					"name": "hashPassword",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Description:**  \nThe `hashPassword` function is responsible for securely hashing a password string using the bcrypt hashing algorithm. Bcrypt is commonly used to hash passwords before storing them in a database to enhance security. This function demonstrates the process of hashing a password and logging the hash value to the console.\n\n**Usage:**\n\n- Typically, this function would be used within a larger authentication or user registration process to hash user passwords before storing them in a database.\n    \n- The hashed password is typically stored in the user's profile or user record for later comparison during authentication."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"Customers\" folder contains API endpoints and related code that focus on customer-related functionalities within the web application. These endpoints handle various operations related to customer data, including retrieving customer profiles, calculating total amounts spent by customers, and hashing customer passwords.\n\n**Contents:**\n\n1. **Get Customers API:** This API endpoint allows users or administrators to retrieve a list of customer profiles from the web application's database.\n    \n2. **Calculate Total Amount API:** This API endpoint calculates the total amount spent by a specific customer on their orders. It provides insights into a customer's purchasing history.\n    \n3. **Hash Password API:** This API endpoint demonstrates password hashing using the bcrypt library. It securely hashes a provided password and logs the resulting hash value.\n    \n\n**Purpose:**  \nThe \"Customers\" folder serves as the backend infrastructure for handling various customer-related functionalities within the web application. It provides essential operations for managing and interacting with customer data, enhancing the user experience and security.\n\n**Usage:**\n\n- Developers can refer to the \"Customers\" folder when implementing features related to customer management, order history, and password security in the application's frontend or backend.\n    \n- The \"Get Customers API\" can be accessed to retrieve customer profiles, the \"Calculate Total Amount API\" for customer purchasing analysis, and the \"Hash Password API\" for securely hashing passwords during user registration or authentication.\n    \n\n**Note:** Ensure that customer-related APIs are secured and properly authenticated, especially when dealing with sensitive data like passwords. Additionally, use best practices for password hashing and storage to protect user credentials."
		},
		{
			"name": "General",
			"item": [
				{
					"name": "getDashboardStats",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Endpoint: Get Dashboard Statistics**\n\n**Description:** This API endpoint retrieves essential statistics and metrics for the web application's dashboard, offering insights into various aspects of the application's performance and activity.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/dashboard/stats`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an object containing a variety of dashboard statistics and metrics, including total customers, yearly total sold units, yearly sales total, monthly data, sales by category, this month's stats, today's stats, and recent transactions.\n    \n- HTTP Status 404 (Not Found): Returns an error message if there was an issue retrieving the dashboard statistics or if the data is not available."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"General\" folder contains API endpoints and related code that provide general and high-level functionalities for the web application. These endpoints typically offer non-specific or cross-cutting features that don't fit neatly into other specific categories but are essential for the overall operation and monitoring of the application.\n\n**Contents:**\n\n1. **Dashboard Stats API:** This API endpoint retrieves and provides general statistics and metrics related to the application's dashboard. It may include data such as user counts, sales figures, or other key performance indicators.\n    \n\n**Purpose:**  \nThe \"General\" folder serves as a central location for housing APIs that offer insights and data that are relevant to the overall health and performance of the web application. These APIs are typically used for dashboard displays, analytics, and general monitoring.\n\n**Usage:**\n\n- Developers can refer to the \"General\" folder when implementing general monitoring and statistics features in the application's frontend or backend.\n    \n- The \"Dashboard Stats API\" can be accessed by authorized users or administrators to view key metrics and insights about the application's performance.\n    \n\n**Note:** It's important to ensure that the data accessed and displayed through the \"General\" folder's APIs is accurate, up-to-date, and secure. Additionally, these APIs may require proper authentication and authorization mechanisms to protect sensitive information and ensure that only authorized users can access the data."
		},
		{
			"name": "Riders",
			"item": [
				{
					"name": "GetRiders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/riders/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"riders",
								""
							]
						},
						"description": "**Description:** This API endpoint retrieves a list of rider profiles from the web application's database. It returns a collection of rider objects, each containing details about individual riders, such as their rider ID, name, contact information, and other relevant information.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/rider`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of rider objects, each representing a rider's profile.\n    \n- HTTP Status 404 (No Riders Found): Returns an \"Unsuccessful\" message if no rider profiles are found in the database.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the rider data."
					},
					"response": []
				},
				{
					"name": "QueueOrders",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Description:** This API endpoint facilitates the queuing of orders for a specific rider in the web application's delivery system. It allows for the assignment of orders to a particular rider for delivery. The endpoint takes two parameters: `rider_id`, which identifies the rider, and `order_id`, which identifies the order to be assigned.\n\n**HTTP Method:** POST\n\n**Request URL:** `/api/rider/order`\n\n**Request Body:**\n\n- `rider_id` (String): The unique identifier of the rider to whom the order is being assigned.\n    \n- `order_id` (String): The unique identifier of the order that is being assigned to the rider.\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a \"successful\" message if the order assignment was completed without errors.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue with the order assignment process or if an error occurred during the update."
					},
					"response": []
				},
				{
					"name": "AddRiders",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Endpoint: Add Rider**\n\n**Description:** This API endpoint allows the addition of new rider profiles to the web application's database. It facilitates the onboarding of new delivery personnel by collecting rider information, including name, email, and rating. The rider's password is securely hashed before being stored in the database.\n\n**HTTP Method:** POST\n\n**Request URL:** `/api/rider/add`\n\n**Request Body:**\n\n- `name` (String): The name of the new rider.\n    \n- `email` (String): The email address of the new rider.\n    \n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a \"successful\" message if the rider profile was successfully added to the database.\n    \n- HTTP Status 409 (User Exists): Returns a \"User Exists\" message if a rider with the same email address already exists in the database, indicating that the addition was unsuccessful.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue during the rider creation process or if an error occurred."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"Rider\" folder contains API endpoints and related code that pertain to rider-related functionalities within the web application. These endpoints handle operations related to managing riders, their orders, and their addition to the system.\n\n**Contents:**\n\n1. **Get Riders API:** This API endpoint allows users or administrators to retrieve a list of rider profiles from the web application's database.\n    \n2. **Queue Orders API:** This API endpoint enables the queuing of orders for riders. It facilitates the assignment of orders to specific riders for delivery.\n    \n3. **Add Riders API:** This API endpoint is used for adding new rider profiles to the system. It provides functionality for onboarding new delivery personnel.\n    \n\n**Purpose:**  \nThe \"Rider\" folder serves as the backend infrastructure for handling rider-related operations within the web application. It provides essential functionality for managing riders, their orders, and their integration into the delivery system.\n\n**Usage:**\n\n- Developers can refer to the \"Rider\" folder when implementing features related to rider management, order assignment, and onboarding of new delivery personnel in the application's frontend or backend.\n    \n- The \"Get Riders API\" can be accessed to retrieve rider profiles, the \"Queue Orders API\" for managing order assignments to riders, and the \"Add Riders API\" for adding new riders to the system.\n    \n\n**Note:** Ensure that rider-related APIs are secured and properly authenticated, especially when handling order assignments or personal information of riders. Additionally, consider implementing validation and verification processes when adding new riders to ensure the integrity and accuracy of the data."
		},
		{
			"name": "Sales",
			"item": [
				{
					"name": "GetSales",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Endpoint: Get Sales Statistics**\n\n**Description:** This API endpoint retrieves overall sales statistics and metrics for the web application, offering insights into the application's sales performance. It fetches aggregated data from the \"OverallStats\" collection.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/sales`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an object containing overall sales statistics and metrics, including total customers, yearly total sold units, yearly sales total, monthly data, and sales by category.\n    \n- HTTP Status 404 (Not Found): Returns an error message if there was an issue retrieving the sales statistics or if the data is not available."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"Sales\" folder contains API endpoints and related code that focus on retrieving and managing sales-related data within the web application. These endpoints are essential for monitoring and analyzing the application's sales performance and statistics.\n\n**Contents:**\n\n1. **Get Sales Statistics API:** This API endpoint allows users or administrators to retrieve overall sales statistics and metrics. It fetches aggregated data related to total customers, yearly total sold units, yearly sales total, monthly data, and sales by category.\n    \n\n**Purpose:**  \nThe \"Sales\" folder serves as the backend infrastructure for handling all aspects of sales data retrieval within the web application. It provides a centralized location for accessing sales-related statistics, enabling stakeholders to assess the application's financial performance.\n\n**Usage:**\n\n- Developers can refer to the \"Sales\" folder when implementing features related to sales monitoring, reporting, and analysis in the application's frontend or backend.\n- The \"Get Sales Statistics API\" can be accessed by authorized users or administrators to view and analyze key sales metrics, aiding in business decision-making.\n    \n\n**Note:** Ensure that the API is secured and properly authenticated to prevent unauthorized access to sensitive sales statistics. Additionally, consider implementing caching mechanisms to optimize performance if the data retrieval process is resource-intensive."
		},
		{
			"name": "Transaction",
			"item": [
				{
					"name": "GetTransaction",
					"request": {
						"method": "GET",
						"header": [],
						"description": "**Endpoint: Get Transactions with Customer Information**\n\n**Description:** This API endpoint retrieves a list of transactions along with detailed customer information for each transaction. It performs a lookup operation to fetch customer information based on the `customer_id` field, providing a comprehensive view of transactions and associated customers.\n\n**HTTP Method:** GET\n\n**Request URL:** `/api/transactions`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with an array of transaction objects, each containing details about the transaction and the associated customer information.\n    \n- HTTP Status 404 (No Transactions Found): Returns an \"Error\" message if no transactions with associated customer details are found.\n    \n- HTTP Status 500 (Error): Returns an error message if there was an issue retrieving the data."
					},
					"response": []
				}
			],
			"description": "**Description:**  \nThe \"Transaction\" folder contains API endpoints and related code focused on retrieving and managing transaction-related data within the web application. Transactions often involve financial activities, and this folder handles various operations related to fetching and displaying transaction details.\n\n**Contents:**\n\n1. **Get Transactions with Customer Information API:** This API endpoint allows users or administrators to retrieve a list of transactions along with detailed customer information for each transaction. It performs a lookup operation to fetch customer information based on the `customer_id` field.\n    \n\n**Purpose:**  \nThe \"Transaction\" folder serves as the backend infrastructure for handling transaction data retrieval within the web application. It provides a centralized location for accessing transaction details with associated customer information, facilitating a comprehensive view of financial activities.\n\n**Usage:**\n\n- Developers can refer to the \"Transaction\" folder when implementing features related to transaction history and financial reporting in the application's frontend or backend.\n    \n- The \"Get Transactions with Customer Information API\" can be accessed by authorized users or administrators to view and analyze transaction data in the context of customer interactions.\n    \n\n**Note:** Ensure that the API is secured and properly authenticated to prevent unauthorized access to sensitive transaction data. Additionally, consider implementing caching mechanisms to optimize performance if the data retrieval process is resource-intensive."
		},
		{
			"name": "User",
			"item": [
				{
					"name": "getUser",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"users"
							]
						},
						"description": "## Get User\n\n### Endpoint\n\n`POST /api/get-user`\n\n### Description\n\nThis endpoint allows you to retrieve user information by providing a username and password for authentication. Upon successful authentication, the endpoint returns a JSON Web Token (JWT) and user details, such as the user's name and a professional designation. This authentication mechanism is used to access protected resources on the Heal Together platform.\n\n### Request Body\n\n- `username` (string): The username of the user to be authenticated.\n    \n- `password` (string): The password associated with the user's account.\n    \n\n### Response\n\n- 200 OK: User authenticated successfully.\n    \n    - `token` (string): JSON Web Token (JWT) for authenticated access.\n        \n    - `name` (string): The user's name.\n        \n    - `professional` (string): A professional designation (e.g., \"Amin Restaurant\").\n        \n- 404 Not Found: User with the specified username not found.\n    \n    - Response body: \"Wrong username\"\n        \n- 401 Unauthorized: Incorrect password.\n    \n    - Response body: \"Wrong password\"\n        \n\n### Example\n\n```\njsonCopy codePOST /api/get-user\n{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}\n\n ```\n\n### Notes\n\n- The endpoint authenticates the user based on the provided username and password.\n    \n- Upon successful authentication, a JWT token is generated for authenticated access to protected resources.\n    \n- The token is valid for 2 hours (`expiresIn: \"2h\"`).\n    \n- Users must use this token to access certain features on the Heal Together platform.\n    \n\n---\n\nThis documentation provides an overview of the \"Get User\" endpoint for the Heal Together API, including the request body, responses, and examples. Developers can use this information to implement user authentication and secure access to protected resources on the platform.\n\n<img src=\"https://chat.openai.com/_next/image?url=https://lh3.googleusercontent.com/a/ACg8ocKlJ0mwQWOKoqVPpckBH28HY2AL4wNRmREg_lw4Kk4Ykvk=s96-c&amp;w=96&amp;q=75\" alt=\"\">\n\nwrite api documation for this folder import express from \"express\"  \nimport {getUser} from \"../controllers/user.js\"  \nconst router=express.Router();  \nrouter.post(\"/\",getUser)  \nexport default router;ChatGPT\n\nCertainly, here's an API documentation description for the \"Get User\" endpoint in your Express.js route:\n\n---\n\n# Heal Together API Documentation\n\n## Get User\n\n### Endpoint\n\n`POST /api/user`\n\n### Description\n\nThis endpoint allows you to retrieve user information by providing a username and password for authentication. Upon successful authentication, the endpoint returns a JSON Web Token (JWT) and user details, such as the user's name and a professional designation. This authentication mechanism is used to access protected resources on the Heal Together platform.\n\n### Request Body\n\n- `username` (string): The username of the user to be authenticated.\n    \n- `password` (string): The password associated with the user's account.\n    \n\n### Response\n\n- 200 OK: User authenticated successfully.\n    \n    - `token` (string): JSON Web Token (JWT) for authenticated access.\n        \n    - `name` (string): The user's name.\n        \n    - `professional` (string): A professional designation (e.g., \"Amin Restaurant\").\n        \n- 404 Not Found: User with the specified username not found.\n    \n    - Response body: \"Wrong username\"\n        \n- 401 Unauthorized: Incorrect password.\n    \n    - Response body: \"Wrong password\"\n        \n\n### Example\n\n```\njsonCopy codePOST /api/user\n{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}\n\n ```\n\n### Notes\n\n- The endpoint authenticates the user based on the provided username and password.\n    \n- Upon successful authentication, a JWT token is generated for authenticated access to protected resources.\n    \n- The token is valid for 2 hours (`expiresIn: \"2h\"`).\n    \n- Users must use this token to access certain features on the Heal Together platform.\n    \n\n---\n\nThis documentation provides an overview of the \"Get User\" endpoint for the Heal Together API. It includes details about the request body, responses, and examples. Developers can use this information to implement user authentication and secure access to protected resources on the platform."
					},
					"response": []
				}
			],
			"description": "### Description\n\nThis endpoint allows you to retrieve user information by providing a username and password for authentication. Upon successful authentication, the endpoint returns a JSON Web Token (JWT) and user details, such as the user's name and a professional designation. This authentication mechanism is used to access protected resources on the Heal Together platform.\n\n### Request Body\n\n- `username` (string): The username of the user to be authenticated.\n    \n- `password` (string): The password associated with the user's account.\n    \n\n### Response\n\n- 200 OK: User authenticated successfully.\n    \n    - `token` (string): JSON Web Token (JWT) for authenticated access.\n        \n    - `name` (string): The user's name.\n        \n    - `professional` (string): A professional designation (e.g., \"Amin Restaurant\").\n        \n- 404 Not Found: User with the specified username not found.\n    \n    - Response body: \"Wrong username\"\n        \n- 401 Unauthorized: Incorrect password.\n    \n    - Response body: \"Wrong password\"\n        \n\n### Example\n\n```\njsonCopy codePOST /api/user\n{\n  \"username\": \"johndoe\",\n  \"password\": \"password123\"\n}\n\n ```\n\n### Notes\n\n- The endpoint authenticates the user based on the provided username and password.\n    \n- Upon successful authentication, a JWT token is generated for authenticated access to protected resources.\n    \n- The token is valid for 2 hours (`expiresIn: \"2h\"`).\n    \n- Users must use this token to access certain features on the Heal Together platform."
		},
		{
			"name": "Testing Url",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						""
					]
				},
				"description": "**Description:** This API endpoint is a simple route that returns a \"Hello\" message when accessed.\n\n**HTTP Method:** GET\n\n**Request URL:** `/`\n\n**Response:**\n\n- HTTP Status 200 (Success): Returns a JSON response with the message \"Hello.\""
			},
			"response": []
		}
	]
}